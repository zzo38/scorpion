
=== Structures ===

ASN1
  Represents a single ASN.1 value. See the section below about ASN.1 data
  formats for an explanation of what the ASN.1 formats mean.

  .data = A pointer to the beginning of the raw primitive or constructed
  data, excluding the bytes for the class, type, and length.

  .length = The length of the data in bytes.

  .type = The type number. If the class is ASN1_UNIVERSAL (0) then this is
  one of the constants listed near the top of the asn1.h file.

  .class = The class, which can be ASN1_UNIVERSAL (0), ASN1_APPLICATION
  (1), ASN1_CONTEXT_SPECIFIC (2), or ASN1_PRIVATE (3).

  .constructed = Zero if primitive or one if constructed.

ASN1_DateTime
  Represents a general date/time (using the Gregorian calendar), including
  the time zone.

  .zone = The time zone, in minutes from UTC; positive numbers are east and
  negative numbers are west.

  .year = The AD year number.

  .month = The month number from 1 to 12.

  .day = The day number from 1 to 31.

  .hours = The number of hours from 0 to 23.

  .minutes = The number of minutes past the hour, from 0 to 59.

  .seconds = The number of seconds past the minute, normally from 0 to 59,
  but may be 60 in the case of leap seconds.

ASN1_Encoder
  This is an opaque type, which is used during encoding.


=== Return values ===

Except as otherwise specified, all functions return an error code, where
zero means OK and nonzero means error.


=== General functions ===

asn1_date_to_time(const ASN1_DateTime*in,time_t*out,uint32_t*nano)
  Convert a ASN1_DateTime structure to UNIX time.

  in = The structure with the date/time to be converted.

  out = Where the output time is written to. In the case of leap seconds,
  the timestamp is the same as that for the last second of the same minute.

  nano = It may be null. If it is not null, writes the number of
  nanoseconds past the UNIX time. This is normally less than one billion,
  but can exceed one billion in the case of leap seconds.

asn1_distinguished_parse(const uint8_t*,size_t,ASN1*,size_t*)
  Same as asn1_parse but does not allow indefinite encoding, and requires
  that the type and length are encoded in the minimum number of bytes.

asn1_free(ASN1*obj)
  Frees dynamic memory belonging to the ASN1 structure. (Most functions
  don't allocate dynamic memory in a ASN1 structure, although some do.)

asn1_from_c_string(uint8_t class,uint32_t type,const char*data,ASN1*out)
  Converts a null-terminated C string into a ASN1 structure (which will
  contain a pointer to the string). The type cannot be automatic; it must
  be specified explicitly. Passing a null pointer is an error.

asn1_make_oid(const char*text,ASN1*out)
  Makes a text OID into a ASN1 structure (containing the binary format
  of the OID). This uses dynamic allocation; use asn1_free to free the
  data after you are finished with it.

  text = The text representation of the OID, which is a sequence of
  integers in decimal notation with dots in between.

  out = Pointer to ASN1 structure to write the result to.

asn1_make_static_oid(const char*text,uint8_t*buf,size_t maxlen,ASN1*out)
  Like asn1_make_oid but uses static allocation, so asn1_free is not
  necessary, but you must ensure that the buffer is not changed or
  deallocated until it is no longer in use.

  text = Text text representation of the OID, like asn1_make_oid.

  buf = The buffer to use.

  maxlen = The maximum size of the buffer.

  out = Pointer to ASN1 structure to write the result to.

asn1_parse(const uint8_t*data,size_t length,ASN1*out,size_t*next)
  Parses a ASN.1 BER value from memory. This does not decode the value.

  data = The pointer to the data.

  length = The maximum length of the data. It will not try to read past
  this length. If this length is not big enough to parse a single value,
  then it returns ASN1_TOO_SHORT.

  out = The ASN1 structure to write the parsed value into.

  next = It may be null. If it is not null, then the total length that has
  been read is added to the variable that it points to, so that you may
  know where to start reading from next.

asn1_time_to_date(time_t in,uint32_t nano,ASN1_DateTime*out)
  Converts UNIX time to a ASN1_DateTime structure.

  in = The UNIX time to be converted.

  nano = The number of nanoseconds. If this is one billion or more, then
  it will increase the number of seconds in the output structure; this
  is only valid if the original number of seconds is exactly 59.

  out = Pointer to the structure to store the result.

void asn1_write_length(uint64_t length,FILE*stream)
  Writes a length header of a ASN.1 item. (This function is used
  internally, but is also available for your own use.)

  length = The length of the data within the item (not including the header
  itself). This does not write the data; only the length header is written.

  stream = File to be written to.

void asn1_write_type(uint8_t constructed,uint8_t class,uint32_t type,FILE*stream)
  Writes a class/type header of a ASN.1 item. (This function is used
  internally, but is also available for your own use.)

  constructed = Set to nonzero for constructed or zero for primitive.

  class = Class of value.

  type = Type of value. The class and type should not both be zero.

  stream = File to be written to.


=== Decoding functions ===

Most of these functions have the first two arguments being "asn" and
"type", where "asn" is the value to decode, and "type" specifies the ASN.1
universal type of the value. If the type is ASN1_AUTO then it will decide
the type automatically from the ASN1 structure; in this case, the class
must be ASN1_UNIVERSAL or ASN1_CONTEXT_SPECIFIC (in which case it assumes
it is an explicit type). If the type passed to the function is not
ASN1_AUTO then it assumes that it is an implicit type and uses the type
you specified instead.

asn1_decode_date(const ASN1*asn,uint32_t type,ASN1_DateTime*out)
  Decodes one of the ASN.1 date/time types. The time zone in the output is
  left unchanged if the ASN.1 value does not specify the time zone, but if
  it does specify the time zone then it will use the time zone in the
  ASN.1 value instead. It will also keep any existing values in the output
  structure for the ASN.1 types that only specify date or only time of day,
  in which case the time of day or the date is kept as it is.

asn1_decode_int8(const ASN1*asn,uint32_t type,int8_t*out)
  Decodes a signed 8-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a signed 8-bit integer.

asn1_decode_int16(const ASN1*asn,uint32_t type,int16_t*out)
  Decodes a signed 16-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a signed 16-bit integer.

asn1_decode_int32(const ASN1*asn,uint32_t type,int32_t*out)
  Decodes a signed 32-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a signed 32-bit integer.

asn1_decode_int64(const ASN1*asn,uint32_t type,int64_t*out)
  Decodes a signed 64-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a signed 64-bit integer.

asn1_decode_number(const ASN1*asn,uint32_t type,???*out)
  A macro that calls one of the other numeric decoding functions according
  to the type of the "out" argument.

asn1_decode_real_parts(const ASN1*asn,uint32_t type,uint8_t*significand,size_t length,int8_t*sign,uint8_t*decimal,int64_t*exponent,uint8_t*infinite,uint8_t*exact)
  Decodes a number (of type ASN1_INTEGER or ASN1_REAL) into parts.

  significand = Stores the significant part, in unsigned big-endian format.

  length = The length of the significant part, in bytes.

  sign = Set to +1 if the number is positive or -1 if it is negative. If
  it is Not a Number, then this will be 0.

  decimal = Set to 1 if it is decimal or 0 if it is binary. If binary, then
  the significand is in base 256, and if decimal, then base 100.

  exponent = The exponent. Zero means that significand[0] is the fractional
  part immediately after the radix point; e.g. if it is 128 and the number
  is binary format then the represented number is one half. Positive
  numbers multiply by a power of two if binary or ten if decimal. Negative
  numbers divide instead.

  infinite = Set to 0 if finite, or 1 if infinite or NaN.

  exact = This may be null. If it is not null, it will write 1 if it is the
  exact number encoded or 0 if some bits/digits don't fit.

asn1_decode_time(const ASN1*asn,uint32_t type,int16_t zone,time_t*out,uint32_t*nano)
  Combines asn1_decode_date and asn1_date_to_time. The defaults for any
  fields other than the time zone will be zero.

  zone = The default time zone, in minutes (specify 0 for UTC). It is
  ignored if the ASN.1 value explicitly specifies the time zone.

asn1_decode_uint8(const ASN1*asn,uint32_t type,uint8_t*out)
  Decodes a unsigned 8-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a 8-bit integer.

asn1_decode_uint16(const ASN1*asn,uint32_t type,uint16_t*out)
  Decodes a unsigned 16-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a 16-bit integer.

asn1_decode_uint32(const ASN1*asn,uint32_t type,uint32_t*out)
  Decodes a unsigned 32-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a 32-bit integer.

asn1_decode_uint64(const ASN1*asn,uint32_t type,uint64_t*out)
  Decodes a unsigned 64-bit integer. Returns ASN1_OVERFLOW if the value is
  not in the range of a 64-bit integer.

asn1_get_bit(const ASN1*asn,uint32_t type,uint64_t which,int*out)
  Reads a single bit from a value.

  which = Which bit to read. How this number is interpreted depends on
  the type, as follows:

  ASN1_BIT_STRING: The high bit of the first byte (although this is not
  the first byte of the encoded value) is bit 0.

  ASN1_OCTET_STRING: The low bit of the first byte is bit 0.

  ASN1_INTEGER: The low bit of the last byte is bit 0. If the bit
  position number is out of range, then it uses the high bit of the
  first byte (the sign bit), instead of leaving it unchanged.

  ASN1_BOOLEAN: The bit position number is ignored.

  out = Where to store the bit that has been read. If the requested bit
  number is out of range then it remains unchanged (therefore allowing
  the use of default values, which is usually zero).

asn1_print_decimal_oid(const ASN1*asn,uint32_t type,FILE*stream)
  Prints a object identifier in decimal format. If any part has a number
  bigger than 160 digits then a question mark is printed instead.
  (Important Note: You should not use this for comparison; if you want to
  compare OIDs, then you should just compare the binary data directly,
  instead. Use asn1_make_oid or asn1_make_static_oid if you have a OID in
  text form that you need to compare.)

  Note that this function may print some data and still return an error,
  in case of an invalid encoding. Numbers that are too big is not an error
  but will print a question mark in place of the too big number.

  type = The type can be ASN1_OID or ASN1_RELATIVE_OID. In the latter case,
  it prints two dots before the numbers.

  stream = The file to write to.


=== Encoding functions ===

Most of these functions require a pointer to a ASN1_Encoder object as the
first argument. Use asn1_create_encoder to create this object, and then
use asn1_finish_encoder to destroy it once you are finished with it.

asn1_construct(ASN1_Encoder*enc,uint8_t class,uint32_t type,uint8_t mode)
  Begins a constructed ASN.1 item.

  class = The class.

  type = The type.

  mode = A combination of flags below (0 to use no flags).

  ASN1_INDEFINITE = Use indefinite length (not valid for DER). This allows
  data to be written to output before the entire contruction is completed,
  so that it can be used with streaming protocols.

  ASN1_ONCE = Automatically ends the construction after a single item
  has been added inside.

ASN1_Encoder*asn1_create_encoder(FILE*file)
  Creates a ASN1_Encoder object that writes its output to the specified
  file (which is not required to be seekable).

FILE*asn1_current_file(ASN1_Encoder*enc)
  Returns a FILE* object for the encoder. This is not necessarily the one
  that has been passed to asn1_create_encoder. You can use this to write
  raw data to the file.

asn1_encode(ASN1_Encoder*enc,const ASN1*value)
  Encodes a single ASN.1 value.

  value = The value to be encoded. This can be any primitive or constructed
  ASN.1 value.

asn1_encode_boolean(ASN1_Encoder*enc,int value)
  Encodes a single boolean value.

  value = The value to be encoded; nonzero is true and zero is false.

asn1_encode_c_string(ASN1_Encoder*enc,uint32_t type,const char*text)
  Encodes a null terminated string (excluding the terminator).

  type = The ASN.1 universal type to use. (You can use asn1_implicit if
  you intend a non-universal type.)

  text = The string to be encoded.

asn1_encode_date(ASN1_Encoder*enc,uint32_t type,const ASN1_DateTime*x)
  Encodes a date/time value.

  type = The ASN.1 type to use for encoding. This can be ASN1_UTCTIME,
  ASN1_GENERALIZEDTIME, ASN1_DATE, ASN1_TIME_OF_DAY, or ASN1_DATE_TIME.

  x = The date/time structure.

asn1_encode_int8(ASN1_Encoder*enc,int8_t value)
  Encodes a signed 8-bit integer.

asn1_encode_int16(ASN1_Encoder*enc,int16_t value)
  Encodes a signed 16-bit integer.

asn1_encode_int32(ASN1_Encoder*enc,int32_t value)
  Encodes a signed 32-bit integer.

asn1_encode_int64(ASN1_Encoder*enc,int64_t value)
  Encodes a signed 64-bit integer.

asn1_encode_integer(ASN1_Encoder*enc,??? value)
  Encodes an integer. This is a macro that calls one of the other functions
  for encoding integers according to the type of the specified value.

asn1_encode_oid(ASN1_Encoder*enc,const char*t)
  Encodes a object identifier (OID).

  t = The text representation of the OID (as for asn1_make_static_oid).

asn1_encode_real_parts(ASN1_Encoder*enc,const uint8_t*significand,size_t length,int8_t sign,uint8_t decimal,int64_t exponent,uint8_t infinite)
  (TODO)

asn1_encode_time(ASN1_Encoder*enc,uint32_t type,time_t value,uint32_t nano,int16_t zone)
  Encodes a date/time value from UNIX time.

  type = The ASN.1 type to use; same as for asn1_encode_date, but may also
  be ASN1_UTC_TIMESTAMP or ASN1_SI_TIMESTAMP.

  value = The UNIX time. Normally, this excludes leap seconds, but if the
  type is ASN1_SI_TIMESTAMP then it includes leap seconds.

  nano = The number of nanoseconds.

  zone = The time zone, in minutes. This is ignored if the type is
  ASN1_UTC_TIMESTAMP or ASN1_SI_TIMESTAMP.

asn1_encode_uint16(ASN1_Encoder*enc,uint16_t value)
  Encodes a unsigned 16-bit integer.

asn1_encode_uint32(ASN1_Encoder*enc,uint32_t value)
  Encodes a unsigned 32-bit integer.

asn1_encode_uint64(ASN1_Encoder*enc,uint64_t value)
  Encodes a unsigned 64-bit integer.

asn1_end(ASN1_Encoder*enc)
  End of a construction started by asn1_construct.

asn1_explicit(ASN1_Encoder*enc,uint8_t class,uint32_t type)
  Like asn1_construct but the mode is always ASN1_ONCE.

asn1_finish_encoder(ASN1_Encoder*enc)
  Finishes an encoder, flushing all data to the output stream, and freeing
  the memory of the encoder. If it returns ASN1_OK or ASN1_ERROR, the
  encoder object is no longer valid after calling this function. If it
  returns ASN1_IMPROPER_MODE then the encoder object is still valid.

asn1_flush(ASN1_Encoder*enc)
  Flush the output file of the encoder. If there is a definite construction
  that is not yet completed, then this will not result in any output.

asn1_implicit(ASN1_Encoder*enc,uint8_t class,uint32_t type)
  Overrides the class and type of the next item to be encoded. Calling it
  after being overridden before writing any more items will result in a
  ASN1_IMPROPER_MODE error.

asn1_primitive(ASN1_Encoder*enc,uint8_t class,uint32_t type,const uint8_t*data,size_t length)
  Encodes a single primitive value.

  class = The class; can be ASN1_UNIVERSAL, ASN1_APPLICATION,
  ASN1_CONTEXT_SPECIFIC, or ASN1_PRIVATE.

  type = The type.

  data = Pointer to the data to be written. This is ignored (and may be
  null) if the length is zero.

  length = The number of bytes of the data.

FILE*asn1_primitive_stream(ASN1_Encoder*enc,uint8_t class,uint32_t type)
  Encodes a primitive value that can be written by the returned stream
  object, instead of being given in memory. You can call asn1_end once
  you are finished writing the value. This function returns a null pointer
  if an error occurs.

  class = The class.

  type = The type.

asn1_wrap(ASN1_Encoder*enc)
  Like asn1_construct(enc,ASN1_UNIVERSAL,ASN1_OCTET_STRING,ASN1_ONCE) but
  the primitive/constructed bit is clear (indicating primitive) instead of
  set (constructed). (This is used for the data of X.509 extensions.)


=== ASN.1 data format ===

(This description uses the convention that bit0 is the low bit of each byte
(that decides if the number is odd or even), rather than the conventions
used in the official specifications.)

All numbers are big-endian.

ASN.1 BER (and DER, which is a restricted variant of BER) consists of:

* The type byte, which has the high 2 bits specifying the class, bit5 being
set for constructed or clear for primitive, and the low 5 bits being the
type number if it is less than 31, or if the type number is 31 or more then
all of the low 5 bits are set and then a big-endian unsigned base 128
number follows which is the true type number, and the high bit of each of
these bytes is set except the last one. The type and class are not allowed
to both be zero.

* The length (number of bytes of data that follows), which can be 0 to 127
for that many bytes, or 128 for indefinite (meaning the length is not
specified; this is only valid if the format is constructed), or 129 to 254
if the low 7 bits of this number is how many bytes follow which are the
true length in unsigned big-endian format. The length byte is not allowed
to be 255 (a length of 255 is encoded as 129 and then 255). Indefinite form
is not allowed for DER.

* The data. The length specifies the number of bytes of this data. If the
format is constructed, then it consists of zero or more ASN.1 BER (or DER)
items. If the format is primitive, then the data is arbitrary and is
according to the data type of this item.

* If the length is specified as indefinite, two 0x00 bytes are required to
indicate the end of this item.

The classes are:

* Universal (0): It is one of the types listed below.

* Application (1): It is intended to be used for a specific application;
the application will define what the type numbers means.

* Context-specific (2): The type depends on the context.

* Private (3): Defined in private specifications.

The universal types are listed below. P means primitive, C means
constructed, and S means that it is a string type. For string types
(other than bit strings), it is normally primitive (and is required to be
primitive in DER), but if it is constructed then it contains any number
of items that use the universal class and universal type number for that
type, and the value is the same as concatenating together.

* Boolean (1 P): True or false. The data is one byte, and is zero for false
or nonzero for true. For DER, true is always represented as 0xFF.

* Integer (2 P): A signed big-endian integer of an arbitrary size. The data
must be at least one byte long, and if it is more than one byte long then
the first byte should not have all bits the same as the high bit of the
second byte (since it would be redundant).

* Bit string (3 S): A sequence of bits, ordered from high to low in each
byte (so the high bit comes first). If the encoding is primitive, then the
first byte specifies how many low bits of the last byte are unused (and
must be clear if the encoding is DER). If the encoding is constructed, then
the first byte to specify the number of unused bits is only present in the
last segment.

* Octet string (4 S): A sequence of arbitrary bytes.

* Null (5 P): No value. The data is always empty.

* Object identifier (6 P): An object identifier which is explained below.

* Object descriptor (7 S): A description of an object that can have a
object identifier. The encoding is the same as the graphic string type.

* External (8 C): Like embedded PDV (see below) but the specification is
a bit different, and is also not mentioned here.

* Real (9 P): A floating point number; the explanation is below.

* Enumerated (10 P): A selection from an enumeration. It is encoded the
same as a integer.

* Embedded PDV (11 C): Represents a value that might not be a ASN.1 type
and that contains identification of the type and/or format of the data.
The specification is a bit complicated and is not mentioned here.

* UTF-8 string (12 S): A string of Unicode characters encoded as UTF-8.

* Relative object identifier (13 P): Like a object identifier but it is
relative to some unspecified object identifier. The encoding is like the
object identifier but does not encode the first two numbers in a special
way (and the numbers are not restricted like a object identifier).

* Time (14 P): Represents a time as ISO 8601.

* Sequence (16 C): A sequence of ASN.1 items.

* Set (17 C): A set of ASN.1 items that do not have an order. DER requires
that the items are in the order that the encoded representations (including
the type/length headers) have when sorted as byte strings.

* Numeric string (18 S): A ASCII string with only digits and/or spaces.

* Printable string (19 S): A ASCII string limited to the subset of ASCII
characters consisting of: uppercase and lowercase alphabets, digits, space,
apostrophe, parentheses, plus, comma, minus, full stop, forward slash,
colon, equal sign, and question mark.

* T.61 string (20 S): Also called a Teletex string. A ISO 2022 string that
uses T.61 characters.

* Videotex string (21 S): A ISO 2022 string with T.100 and T.101
characters.

* IA5 string (22 S): A unrestricted ASCII string.

* UTC time (23 S): Date/time in the format "YYMMDDhhmm[ss]Z". The quotation
marks are not a part of the encoding, and [] means optional. YY is two year
digits (since the century cannot be encoded, 50 means AD 1950 and 49 means
AD 2049). MM is two month digits, from 01 for January to 12 for December.
DD is the day of the month, from 01 to 31. hh is the number of hours past
midnight, from 00 (midnight) to 23. mm is the number of minutes past the
hour, from 00 to 59. ss is the number of seconds (and is optional) from 00
to 59 (it might also be 60 for leap seconds, although the specification
does not consider this and only limits it to 59). Z is the time zone; it
can be literally "Z" by itself to mean UTC, or otherwise it is "+" or "-"
(for east or west of UTC, respectively) to mean that the specified time is
a number of hours and minutes offset from UTC; the number of hours is two
digits and the number of minutes is two digits. If the encoding is DER,
then the time zone must be "Z" and the seconds are mandatory.

* Generalized time (24 S): Date/time in format "YYYYMMDDhhmmss[.fff][Z]",
like above for UTC time except as specified here. YYYY is now four digits
and is the full AD year number. The time zone is now optional (but must
be present and "Z" if the encoding is DER). Seconds is now mandatory. You
can optionally specify "." (or ",", but "." is required for DER) and a
fractional number of seconds; in the case of DER, trailing zeros are not
allowed for the fractional number of seconds, and "." is omitted if the
number of seconds is an integer (so there are no fractional seconds).

* Graphic string (25 S): A ISO 2022 string can have any graphic characters
but cannot have control characters.

* Visible string (26 S): A ASCII string without control characters.

* General string (27 S): A unrestricted ISO 2022 string.

* Universal string (28 S): A string of 32-bit ISO 10646 characters.

* Character string (29 C): An unrestricted character string. The
definition is a bit complicated and is not mentioned here.

* BMP string (30 S): A string of 16-bit Unicode characters.

A field can have an implicit or explicit type. An implicit type means the
specified class and type replaces the universal class and universal type
number in the encoding, so that the schema is required in order to know
the data type of that item. An explicit type is similar but the item is
constructed and contains a single item of that type (using the class and
type numbers that it would usually have normally), so that it can be
decoded without needing the schema (the encoding is like a implicit typed
sequence containing a single item). If an implicit or explicit type does
not specify the class, then the class is context-specific.

An object identifier is a sequence of non-negative integers that represents
some universal object. There must be at least two numbers; the first must
be 0 to 2, and if the first isn't 2 then the second must be 0 to 39. If you
want to define your own OID, then you must either register an arc with some
kind of registration authority, or you must use a arc that does not require
registration and use the mechanism that it requires in order to make up a
OID. You can then use that OID and any OID that the registered one is a
prefix of; e.g. if you have "2.999.1" then you can also use "2.999.1.15"
and "2.999.1.42.99.0.6" as well (these numbers are examples).

The encoding of an object identifier must be not empty, and must consist of
the big-endian unsigned base 128 numbers in order, with the high bit of
each byte set except the last byte of a number. Padding (0x80 as the first
byte of a number) is not allowed. The first two numbers are encoded as a
single number, by multiplying the first number by forty and then adding the
second number, to produce the number that it should be encoded as.

The working of real numbers is:

* Positive zero is represented by empty data.

* Negative zero is represented by a single byte 0x43.

* Positive infinity is represented by a single byte 0x40.

* Negative infinity is represented by a single byte 0x41.

* NaN is represented by a single byte 0x42.

* A binary number has the first byte specifying some flags. The high bit
(bit7) is always set, the bit6 is set for negative or clear for positive,
the bit5 and bit4 specify the base of the exponent (0 means base 2, 1 means
base 8, and 2 means base 16; 3 is not valid), bit3 and bit2 are the left
shift amount of the significand, and the bit1 and bit0 specify the number
of exponent bytes (0 for 1 byte, 1 for 2 bytes, 2 for 3 bytes, or 3 if the
next byte specifies the number of exponent bytes).

* For a binary number, the flag byte is followed by the exponent bytes
(preceded by the number of exponent bytes if the flag byte has the two low
bits set), which is a signed big-endian number; and then after the exponent
is the significand which is a unsigned big-endian number.

* For DER encoding of binary numbers, the base must be 2, and the
significand must be either zero or an odd number, and the scaling factor
(bit3 and bit2 of the flag byte) must be zero, and the smallest number of
bytes must be used to encode the exponent and significand.

* A decimal number starts with 0x01 or 0x02 or 0x03, followed by the ASCII
representation of the ISO 6093 number of NR1 or NR2 or NR3, respectively.

* A ISO 6093 number starts with zero or more spcaes, and then the optional
plus or minus sign (plus is assumed if neither is specified), and then one
or more digits, and then optionally a decimal-mark and zero or more digits,
and then optionally the exponent part. The exponent part consists of the
exponent-mark and then an optional plus or minus sign and then one or more
digits. A decimal-mark is a dot or comma. A exponent-mark is a lowercase or
uppercase E. (The meaning is the usual meaning like scientific notation.)

* NR1 means the decimal-mark and exponent part are both omitted. NR2 means
the decimal-mark is present but the exponent is omitted. NR3 means that the
decimal-mark and the exponent are both present.

* For decimal numbers, DER requires the use of NR3, with no spaces, without
a plus sign for positive numbers (although a minus sign is used for
negative numbers), neither the first nor last digit of the significand can
be zero, and the last digit of the significand must be immediately followed
by a dot and a uppercase E and then the exponent. The exponent cannot have
a plus sign unless the exponent is zero in which case it does.

Other restrictions of DER, which are not mentioned above:

* If a field is optional because it has a default value that is used when
the field is omitted, then the field must be omitted for DER if the value
of the field is equal to the default value.

* ISO 2022 strings are not allowed to use redundant escape codes to select
character sets that are already selected, and must be designated as the
smallest numbered G or C set that is allowed (e.g. G0 must be used instead
of G1 if the character set is allowed to be G0).


=== ASN.1X ===

ASN.1X is a variant of ASN.1 which adds some additional universal types and
schema types, and removes some, deprecates some, and adds a few other
restrictions as well. (Most of this is not implemented yet, and may be
changed before the implementation is made.)

The following universal typse are not used in ASN.1X:
  ASN1_TIME (14)
  ASN1_DATE (31)
  ASN1_TIME_OF_DAY (32)
  ASN1_DATE_TIME (33)
  ASN1_DURATION (34)
  ASN1_OID_IRI (35)
  ASN1_RELATIVE_OID_IRI (36)

The following types are deprecated in ASN.1X:
  ASN1_NUMERICSTRING (18)
  ASN1_UTCTIME (23)

New universal types:

* ASN1_BCD_STRING (64): Represents a string with the following characters:
"0123456789*#+-. " (excluding the quotation marks). Each octet encodes
two characters, where the high nybble corresponds to the first character
and the low nybble corresponds to the second character.

* ASN1_PC_STRING (65): Represents a string of characters in the PC
character set. Note that the control characters can also be used as
graphic characters.

* ASN1_TRON_STRING (66): Represents a string of characters in the TRON
character set, encoded as TRON-8.

* ASN1_KEY_VALUE_LIST (67): Represents a set of keys (with no duplicate
keys) and with a value associated with each key. The encoding is the same
as for a SET of the keys, but with the corresponding value immediately
after each key (when they are sorted, only the keys are sorted and the
values are kept with the corresponding keys).

* ASN1_UTC_TIMESTAMP (68): Represents a number of UTC seconds (and
optionally fractions of seconds), excluding leap seconds, relative to
January 1, 1985, 00:00:00, UTC.

* ASN1_SI_TIMESTAMP (69): Represents a number of SI seconds (and
optionally fractions of seconds), including leap seconds, relative to
January 1, 1985, 00:00:00, UTC.

* ASN1_UTC_TIME_INTERVAL (70): Represents a time interval as a number
of UTC seconds. The number of seconds does not include leap seconds.

* ASN1_SI_TIME_INTERVAL (71): Represents a time interval as a number
of SI seconds (which may include fractions).

* ASN1_OUT_OF_BAND (72): This type is not for use for general-purpose
data. It represents something which is transmitted out of band (e.g. a
file descriptor) with whatever transport mechanism is being used. The
transport mechanism defines how a value of this type is supposed to be
encoded with whatever ASN.1 encoding is being used.

The encoding of the new time types can be any one of:

* A primitive encoding, same as the INTEGER type. This represents a
integer number of seconds. This is valid for all four types.

* A constructed encoding, containing a REAL. This represents a number
of seconds. This is only valid for the SI-based types.

* A constructed encoding, containing a INTEGER followed by a REAL.
This represents a integer number of UTC seconds and a number of SI
seconds. The number of SI seconds must be nonnegative and finite, and
must be less than one unless the number of UTC seconds is one less
than a multiple of sixty. This is only valid for ASN1_UTC_TIMESTAMP.

The following additional schema types exist:

* INLINE and INLINE OF: Is similar than SEQUENCE and SEQUENCE OF, but
it is not encoded as a single item but instead as all of the items it
contains directly within whatever container it is in. A field of type
INLINE or INLINE OF cannot have an implicit type (although explicit
is OK, in which case it is encoded like a implicit typed SEQUENCE) (it
is OK for fields within a INLINE to have implicit or explicit types),
and cannot be a field of a SET. A field of a CHOICE can be of a INLINE
or INLINE OF type, but fields of that CHOICE type are then subject to
the same restrictions as fields of a INLINE type. The last field of a
INLINE type cannot be optional and cannot have a default value.

* ANY: This has been removed from ASN.1 but is usable in ASN.1X. It
means that an item of any type can be used for this field, except for
INLINE and INLINE OF types. Except for ANY DEFINED BY, a field of ANY
type cannot have an implicit type (but explicit is OK), and its class
cannot be context-specific. If the type is SEQUENCE OF ANY DEFINED BY
then it can also be defined by a sequence of object identifiers (in
addition to being possible to be defined by a single object identifier),
in which case each item in the sequence is defined by the the item in
the sequence it references.

* OBJECT IDENTIFIER RELATIVE TO: You can specify that a OID is normally
relative to a specified other constant OID or a OID in another field.
A field of a OBJECT IDENTIFIER RELATIVE TO type cannot have an implicit
type (but explicit is OK). The encoding is either as a OBJECT IDENTIFIER
value representing the full OID (which can be any OID and is not required
to be relative to the specified OID) or it can be a RELATIVE OID value
which is interpreted as relative to the specified OID. If the encoding is
DER, then it must be encoded as relative if possible, and as absolute
only if relative is not possible. If the encoding is BER, then it can be
encoded as absolute or relative regardless of what OID it is.

* Extended character string syntax: Any character string can also be
written in text as a hexadecimal string with the BER or DER encoding of
the string, although the type must be explicitly specified in order to
avoid ambiguity. Furthermore, the TRON string is allowed to use the
"Quadruple" notation, although the plane, row, and cell numbers are
required to be in the range 33 to 253 inclusive except 127 (the group
number can be any non-negative integer).

* UTF16String: This type uses the same type number and encoding as the
BMPString type, but allows surrogates to represent non-BMP characters.

The following additional restrictions exist:

* If a string uses a constructed encoding, then the segments of the
string must use the primitive encoding; they cannot also be constructed.

* Optional and default fields are not allowed unless it is possible to
determine its presence or absence without needing to look ahead. For
this purpose, ANY DEFINED BY is treated the same as ANY.

* The UTCTime and GeneralizedTime types must use the primitive encoding.

* XML types and other XML-related stuff is not used.

* When the ASN.1 text schema notation is used and it contains character
string data, the character set must be explicitly specified unless it is
one of the ASCII-based string types.

* ASN1-CHARACTER-MODULE is not a built-in module, although it may be
defined as a separate file if this is desired.

* PATTERN constraints have some additional restrictions as well as some
additional possible notations, compared with standard ASN.1.

